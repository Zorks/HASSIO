- sensor: 
  - name: "Number of hours until the Hippo's next adventure starts"
    unique_id: next_hippo_departure_hrs
    # note that if there is no future departures, it defaults to 25 hrs + 10 seconds to avoid floating point math issues
    state: "{{(as_timestamp(states('sensor.next_hippo_departure' ), as_timestamp(now()) + 90010 ) -  as_timestamp(now())) / 3600 }}"
  - name: "Downstairs Temperature"
    unique_id: honeywell_temp 
    unit_of_measurement: '°F'
    state: "{{ states.climate.thermostat.attributes.current_temperature }}"
  - name: "Humidity difference between bathroom and house"
    unique_id: bathroom_humidity_diff
    unit_of_measurement: '%'
    state: "{{ states('sensor.bathroom_sensor_humidity')|float(0)|round(0) - states('sensor.home_humidity')|float(0)|round(0) | int }}"
  - name: "Home Temperature"
    unique_id: house_avg_temp
    unit_of_measurement: '°F'
    state: >-
      {{ ((float(states('sensor.bedroom_temperature')) + float(states('sensor.home_temperature')) + float(states('sensor.living_room_temperature'))) / 3) | round(2) }}

- trigger:
    - platform: time_pattern
      minutes: "/5"
    - platform: homeassistant
      event: start
    - platform: state
      entity_id: weather.kbfi_daynight
    - platform: event
      event_type: event_template_reloaded
  action:
    - service: weather.get_forecasts
      data:
        type: twice_daily
      target:
        entity_id: weather.kbfi_daynight
      response_variable: daily
    - service: nws.get_forecasts_extra
      data:
        type: twice_daily
      target:
        entity_id: weather.kbfi_daynight
      response_variable: weather_forecast
  sensor:
    - name: kbfi daynight
      state: "{{ states('weather.kbfi_daynight') }}"
      icon: mdi:weather-cloudy
      attributes:
        forecast: "{{ daily['weather.kbfi_daynight'].forecast }}"
    - name: kbfi daynight extra
      state:  "{{ states('weather.kbfi_daynight') }}"
      icon: mdi:weather-cloudy
      attributes:
        forecast: "{{ weather_forecast['weather.kbfi_daynight'].forecast }}"
    - name: "{{ as_timestamp(state_attr('sensor.kbfi_daynight', 'forecast').0.datetime) | timestamp_custom('%A') }} {{'morning' if (state_attr('sensor.kbfi_daynight', 'forecast').0.is_daytime) else 'night'}} temperature"
      unique_id: temperature_0d
      unit_of_measurement: '°F'
      state: "{{ state_attr('sensor.kbfi_daynight', 'forecast').0.temperature }}"
    - name: "{{ as_timestamp(state_attr('sensor.kbfi_daynight', 'forecast').1.datetime) | timestamp_custom('%A') }} {{'morning' if (state_attr('sensor.kbfi_daynight', 'forecast').1.is_daytime) else 'night'}} temperature"
      unique_id: temperature_1d
      unit_of_measurement: '°F'
      state: "{{ state_attr('sensor.kbfi_daynight', 'forecast').1.temperature }}"
    - name: "{{ as_timestamp(state_attr('sensor.kbfi_daynight', 'forecast').2.datetime) | timestamp_custom('%A') }} {{'morning' if (state_attr('sensor.kbfi_daynight', 'forecast').2.is_daytime) else 'night'}} temperature"
      unique_id: temperature_2d
      unit_of_measurement: '°F'
      state: "{{ state_attr('sensor.kbfi_daynight', 'forecast').2.temperature }}"
    - name: "{{ as_timestamp(state_attr('sensor.kbfi_daynight', 'forecast').3.datetime) | timestamp_custom('%A') }} {{'morning' if (state_attr('sensor.kbfi_daynight', 'forecast').3.is_daytime) else 'night'}} temperature"
      unique_id: temperature_3d
      unit_of_measurement: '°F'
      state: "{{ state_attr('sensor.kbfi_daynight', 'forecast').3.temperature }}"
    - name: "{{ as_timestamp(state_attr('sensor.kbfi_daynight', 'forecast').4.datetime) | timestamp_custom('%A') }} {{'morning' if (state_attr('sensor.kbfi_daynight', 'forecast').4.is_daytime) else 'night'}} temperature"
      unique_id: temperature_4d
      unit_of_measurement: '°F'
      state: "{{ state_attr('sensor.kbfi_daynight', 'forecast').4.temperature }}"

- trigger:
    - platform: time_pattern
      minutes: "/3"
  sensor:
    - name: "Next time the Hippo is set to go on an adventure"
      unique_id: next_hippo_departure
      state: >-
        {% if (integration_entities('scheduler') | select('is_state', 'on') | list | length ) > 0 %}
          {{integration_entities('scheduler')| select('is_state', 'on') | map('state_attr','next_trigger') | sort | first | as_datetime }}
        {%else%}
          unknown
        {% endif %}