alias: 'Schedule the next Forest Hippo adventure'
# once there's a scheduled departure within the next 24 hrs, the hippo will be told to get ready at the appropriate time
trigger:
  - platform: time_pattern
    # checks for a new departure every 15 minutes
    minutes: "/15"
condition:
    # is the next adventure within 23 hrs? (note that no scheduled departures will default to +24 hrs to make this condition not-true)
  - "{{int(states('sensor.next_hippo_departure_hrs')) < 23 }}"
    # does not match the last set departure time (aka, is it new departure?) 
  - "{{state_attr('binary_sensor.tesla_model_y_scheduled_departure', 'Departure timestamp' ) != as_timestamp(states('sensor.next_hippo_departure' )) }}"
    # the service call doesn't work unless the vehicle is in park
  - condition: state 
    entity_id: sensor.tesla_model_y_shift_state
    state: "P"
  # Scheduled Departure is location dependant - HASSIO automations should only effect Home location
  - condition: state 
    entity_id: device_tracker.tesla_model_y_location_tracker
    state: "home"
action:
  - service: tesla_custom.api
    data:
      command: SCHEDULED_DEPARTURE
      parameters:
        path_vars:
          vehicle_id: >-
            {{ state_attr('binary_sensor.tesla_model_y_online', 'id') }}
        enable: true
        #same as end_off_peak_time - converts the sensor value from a full date time value to just the local time and then converts that into minutes from midnight due to the formatting that Tesla requires
        departure_time: >-
            {{(states('sensor.next_hippo_departure') | as_timestamp | timestamp_custom('%H:%M'))[0:2] | int * 60 + (states('sensor.next_hippo_departure') | as_timestamp | timestamp_custom('%H:%M'))[3:5] | int}}
        preconditioning_enabled: true
        preconditioning_weekdays_only: false
        off_peak_charging_enabled: true
        off_peak_charging_weekdays_only: false
        end_off_peak_time: >-
            {{(states('sensor.next_hippo_departure') | as_timestamp | timestamp_custom('%H:%M'))[0:2] | int * 60 + (states('sensor.next_hippo_departure') | as_timestamp | timestamp_custom('%H:%M'))[3:5] | int}}
        wake_if_asleep: true
  # sets state of charge to chosen percentage for next departure
  - service: tesla_custom.api
    data:
      command: CHANGE_CHARGE_LIMIT
      parameters:
        path_vars:
          vehicle_id: >-
            {{ state_attr('binary_sensor.tesla_model_y_online', 'id') }}
        percent: >-
          {{integration_entities('scheduler') 
          | select('is_state', 'on')
          | expand 
          | sort(attribute="attributes.next_trigger")
          | first 
          | regex_findall("\'value\'\: \d+","")
          | regex_replace ("[^0-9]","") 
          | int(default=79)
          }}
    # logs the Hassio set departure time to compare against the next departure time so that the automation doesn't trigger unnecessarily  
  - service: input_datetime.set_datetime
    target:
      entity_id: input_datetime.hippo_departure
    data_template:
      datetime: "{{states('sensor.next_hippo_departure')}}"        
      
      
 # need logic for if a scheduled event is cancelled or if it is set manually through the tesla app     